The entire source code of my project has been compressed into a single .txt file, which I will provide. I need you to thoroughly read and analyze the code to identify any potential issues, errors, or inefficiencies. Please do not ask me to verify or check anything related to the code, as what I’m providing is the complete and final version of my codebase and speak VietNamese

---docker-compose.yml
services:
odoo:
image: odoo:16.0
depends_on:
- db
ports:
- "8069:8069"
volumes:
- ./extra-addons:/mnt/extra-addons
- ./odoo.conf:/etc/odoo/odoo.conf
- odoo-data:/var/lib/odoo
environment:
- HOST=db
- USER=odoo
- PASSWORD=odoo
restart: unless-stopped
db:
image: postgres:13
environment:
- POSTGRES_DB=postgres
- POSTGRES_USER=odoo
- POSTGRES_PASSWORD=odoo
volumes:
- odoo-db-data:/var/lib/postgresql/data
restart: unless-stopped
volumes:
odoo-data:
odoo-db-data:
---Dockerfile
FROM odoo:16.0
USER root
COPY ./extra-addons /mnt/extra-addons
COPY ./odoo.conf /etc/odoo/odoo.conf
USER odoo
---odoo.conf
[options]
addons_path = /mnt/extra-addons,/usr/lib/python3/dist-packages/odoo/addons
db_host = db
db_port = 5432
db_user = odoo
db_password = odoo
db_name = odoo
admin_passwd = 12345
xmlrpc_port = 8069
log_level = info
---.idea\projectSettingsUpdater.xml
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
<component name="RiderProjectSettingsUpdater">
<option name="singleClickDiffPreview" value="1" />
<option name="vcsConfiguration" value="3" />
</component>
</project>
---.idea\workspace.xml
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
<component name="ChangeListManager">
<list default="true" id="8c80b1f0-f2be-4605-ac06-59a109d0fca0" name="Changes" comment="">
<change beforePath="$PROJECT_DIR$/!code-compressed-tool.txt" beforeDir="false" afterPath="$PROJECT_DIR$/!code-compressed-tool.txt" afterDir="false" />
<change beforePath="$PROJECT_DIR$/extra-addons/membership_profile_search/views/membership_profile_search_templates.xml" beforeDir="false" afterPath="$PROJECT_DIR$/extra-addons/membership_profile_search/views/membership_profile_search_templates.xml" afterDir="false" />
</list>
<option name="SHOW_DIALOG" value="false" />
<option name="HIGHLIGHT_CONFLICTS" value="true" />
<option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
<option name="LAST_RESOLUTION" value="IGNORE" />
</component>
<component name="Git.Settings">
<option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$/.." />
</component>
<component name="ProjectColorInfo"><![CDATA[{
"associatedIndex": 5
}]]></component>
<component name="ProjectId" id="2wny5iv4vsq385hnnir3QACDfg9" />
<component name="ProjectViewState">
<option name="hideEmptyMiddlePackages" value="true" />
<option name="showLibraryContents" value="true" />
</component>
<component name="PropertiesComponent"><![CDATA[{
"keyToString": {
"RunOnceActivity.ShowReadmeOnStart": "true",
"RunOnceActivity.git.unshallow": "true",
"git-widget-placeholder": "main",
"nodejs_package_manager_path": "npm",
"vue.rearranger.settings.migration": "true"
}
}]]></component>
<component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
<component name="TaskManager">
<task active="true" id="Default" summary="Default task">
<changelist id="8c80b1f0-f2be-4605-ac06-59a109d0fca0" name="Changes" comment="" />
<created>1746691451894</created>
<option name="number" value="Default" />
<option name="presentableId" value="Default" />
<updated>1746691451894</updated>
<workItem from="1746691453798" duration="185000" />
</task>
<servers />
</component>
<component name="TypeScriptGeneratedFilesManager">
<option name="version" value="3" />
</component>
<component name="UnityProjectConfiguration" hasMinimizedUI="false" />
<component name="VcsManagerConfiguration">
<option name="CLEAR_INITIAL_COMMIT_MESSAGE" value="true" />
</component>
</project>
---extra-addons\membership_profile_search\hooks.py
from odoo import api, SUPERUSER_ID # type: ignore

def clear_asset_cache(cr, registry):
env = api.Environment(cr, SUPERUSER_ID, {})
# Chỉ xóa các bản ghi ir.attachment liên quan đến module membership_profile_search
attachments = env['ir.attachment'].search([
('url', 'like', '/web/assets/%'),
('res_model', '=', False),
('res_id', '=', False),
('name', 'like', 'membership_profile_search%'),  # Giới hạn trong tài nguyên của module
])
if attachments:
attachments.unlink()

# Xóa các view không còn được sử dụng liên quan đến membership_profile_search
views = env['ir.ui.view'].search([
('key', 'like', 'membership_profile_search.%'),
])
if views:
views.unlink()
---extra-addons\membership_profile_search\utils.py
import unicodedata
import re

def remove_diacritics(text):
"""
Hàm chuẩn hóa chuỗi văn bản, loại bỏ dấu tiếng Việt để hỗ trợ tìm kiếm không dấu.
Args:
text (str): Chuỗi văn bản đầu vào cần chuẩn hóa.
Returns:
str: Chuỗi văn bản đã được loại bỏ dấu và thay thế các ký tự đặc biệt như 'đ', 'Đ'.
"""
text = unicodedata.normalize('NFD', text)
text = re.sub(r'[\u0300-\u036f]', '', text)
text = text.replace('đ', 'd').replace('Đ', 'D')
return text
---extra-addons\membership_profile_search\__init__.py
# extra-addons/membership_profile_search/__init__.py
from . import controllers
from . import models
from . import utils
from . import hooks
---extra-addons\membership_profile_search\__manifest__.py
{
'name': 'Membership Profile Search',
'version': '16.0.2.0',
'summary': 'Mô-đun Membership Profile Search cung cấp chức năng quản lý và hiển thị danh sách hội viên công khai trên website Odoo',
'description': """
Mô-đun Membership Profile Search cung cấp chức năng quản lý và hiển thị danh sách hội viên công khai trên website Odoo. Các tính năng chính bao gồm:
- Tìm kiếm hội viên theo tên, công ty, ngành nghề hoặc địa chỉ (hỗ trợ tìm kiếm không dấu).
- Lọc hội viên theo ngành nghề.
- Hiển thị chi tiết hội viên với thông tin như ảnh đại diện, tên công ty, ngành nghề và địa chỉ.
- Giao diện responsive, thân thiện với người dùng trên cả desktop và mobile.
- Bảo mật với phân quyền truy cập công khai và nội bộ.
""",
'category': 'Tools',
'author': 'Nhóm 1 - VINA',
'depends': ['base', 'website', 'membership', 'website_partner', 'web_editor', 'website_sale', 'im_livechat', 'web'],
'data': [
'security/ir.model.access.csv',
'views/membership_profile_search_templates.xml',
],
'test': [
'tests/test_membership_profile_search.py',
],
'assets': {
'web.assets_frontend': [
'membership_profile_search/static/src/js/membership_search.js',
'membership_profile_search/static/src/components/*.js',
'membership_profile_search/static/src/css/*.css',
'membership_profile_search/static/src/xml/*.xml',
'membership_profile_search/static/img/placeholder.png',
],
},
'images': [
'static/description/search.png',
'static/description/nobita.jpg',
'static/description/shin.jpg',
],
'installable': True,
'application': True,
'license': 'LGPL-3',
'post_init_hook': 'clear_asset_cache',
}
---extra-addons\membership_profile_search\controllers\main.py
# extra-addons/membership_profile_search/controllers/main.py
from odoo import http
from odoo.http import request
from werkzeug.exceptions import NotFound
from .. import utils
import traceback
import json

class MembershipProfileSearchController(http.Controller):
@http.route('/membership', type='http', auth='public', website=True)
def list_members(self, **kwargs):
try:
search_term = ' '.join(kwargs.get('search', '').strip().split())
industry = ' '.join(kwargs.get('industry', '').strip().split())
domain = [
('membership_state', '!=', 'none'),
('website_published', '=', True),
]

if search_term:
normalized_search = utils.remove_diacritics(search_term).lower()
domain += ['|', '|', '|',
('name_no_diacritics', 'ilike', normalized_search),
('company_name_no_diacritics', 'ilike', normalized_search),
('industry_id.name', 'ilike', normalized_search),
('street_no_diacritics', 'ilike', normalized_search)]

if industry:
normalized_industry = utils.remove_diacritics(industry).lower()
domain += [('industry_id.name', 'ilike', normalized_industry)]

members = request.env['res.partner'].sudo().search(domain)
return request.render('membership_profile_search.membership_profile_search_list_template', {
'members': members,
'search': search_term,
'industry': industry
})
except Exception as e:
error_trace = traceback.format_exc()
request.env['ir.logging'].sudo().create({
'name': 'MembershipProfileSearch',
'type': 'server',
'level': 'ERROR',
'message': f"Error: {str(e)}\nTraceback: {error_trace}",
'path': '/membership',
'func': 'list_members',
'line': 1,
})
return request.render('website.page_404', {'error': 'Không thể tải danh sách hội viên. Vui lòng thử lại sau.'}, status=500)

@http.route('/membership/data', type='json', auth='public', website=True)
def get_members_data(self, **kwargs):
try:
search_term = ' '.join(kwargs.get('search', '').strip().split())
industry = ' '.join(kwargs.get('industry', '').strip().split())
page = int(kwargs.get('page', 1))
limit = int(kwargs.get('limit', 12))
offset = (page - 1) * limit

domain = [
('membership_state', '!=', 'none'),
('website_published', '=', True),
]

if search_term:
normalized_search = utils.remove_diacritics(search_term).lower()
domain += ['|', '|', '|',
('name_no_diacritics', 'ilike', normalized_search),
('company_name_no_diacritics', 'ilike', normalized_search),
('industry_id.name', 'ilike', normalized_search),
('street_no_diacritics', 'ilike', normalized_search)]

if industry:
normalized_industry = utils.remove_diacritics(industry).lower()
domain += [('industry_id.name', 'ilike', normalized_industry)]

members = request.env['res.partner'].sudo().search(domain, offset=offset, limit=limit)
total = request.env['res.partner'].sudo().search_count(domain)
members_data = [{
'id': member.id,
'name': member.name or '',
'company_name': member.company_name or '',
'industry_id': {'name': member.industry_id.name or ''},
'street': member.street or '',
'city': member.city or '',
'state_id': {'name': member.state_id.name or ''},
'country_id': {'name': member.country_id.name or ''},
'image_1920': member.image_1920 or ''
} for member in members]
return {'members': members_data, 'total': total, 'limit': limit}
except Exception as e:
error_trace = traceback.format_exc()
request.env['ir.logging'].sudo().create({
'name': 'MembershipProfileSearch',
'type': 'server',
'level': 'ERROR',
'message': f"Error: {str(e)}\nTraceback: {error_trace}",
'path': '/membership/data',
'func': 'get_members_data',
'line': 1,
})
return {'members': [], 'total': 0, 'limit': 12}
---extra-addons\membership_profile_search\controllers\__init__.py
from . import main
---extra-addons\membership_profile_search\models\membership_profile_search.py
from odoo import fields, models, api # type: ignore
from .. import utils

class MembershipProfileSearch(models.Model):
_inherit = 'res.partner'
_description = 'Membership Profile Search'

image_1920 = fields.Image(string='Profile Image', max_width=1920, max_height=1920)
company_name = fields.Char(string='Company Name', store=True, compute='_compute_company_name', readonly=False)
industry_id = fields.Many2one('res.partner.industry', string='Industry')
street = fields.Char(string='Street')
city = fields.Char(string='City')
state_id = fields.Many2one('res.country.state', string='State')
country_id = fields.Many2one('res.country', string='Country')
name_no_diacritics = fields.Char(
string='Name No Diacritics', store=True, compute='_compute_no_diacritics', index=True
)
company_name_no_diacritics = fields.Char(
string='Company Name No Diacritics', store=True, compute='_compute_no_diacritics', index=True
)
street_no_diacritics = fields.Char(
string='Street No Diacritics', store=True, compute='_compute_no_diacritics', index=True
)

@api.depends('parent_id', 'parent_id.name', 'name', 'is_company')
def _compute_company_name(self):
for partner in self:
partner.company_name = (
partner.parent_id.name if partner.parent_id and partner.parent_id.name
else partner.name if partner.is_company and partner.name
else ''
)

@api.depends('name', 'company_name', 'street')
def _compute_no_diacritics(self):
for partner in self:
partner.name_no_diacritics = utils.remove_diacritics(partner.name or '')
partner.company_name_no_diacritics = utils.remove_diacritics(partner.company_name or '')
partner.street_no_diacritics = utils.remove_diacritics(partner.street or '')
---extra-addons\membership_profile_search\models\__init__.py
from . import membership_profile_search
---extra-addons\membership_profile_search\security\ir.model.access.csv
id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink
access_membership_profile_search_public,membership_profile_search.public,model_res_partner,base.group_public,1,0,0,0
access_membership_profile_search_user,membership_profile_search.user,model_res_partner,base.group_user,1,1,1,0
---extra-addons\membership_profile_search\static\src\components\IndustryFilter.js
/** @odoo-module **/

import { Component, useState } from "@odoo/owl";

export class IndustryFilter extends Component {
static template = "membership_profile_search.IndustryFilter";

setup() {
this.state = useState({ activeIndustry: "" });
this.industries = Array.isArray(this.props.industries) ? this.props.industries : [];
}

setIndustry(industry) {
this.state.activeIndustry = industry;
this.props.onIndustryChange(industry);
}
}
---extra-addons\membership_profile_search\static\src\components\MemberCard.js
/** @odoo-module **/

import { Component } from "@odoo/owl";

export class MemberCard extends Component {
static template = "membership_profile_search.MemberCard";

get imageSrc() {
return this.props.member.image_1920 && this.props.member.image_1920 !== ""
? `/web/image/res.partner/${this.props.member.id}/image_1920`
: "/membership_profile_search/static/img/placeholder.png";
}
}
---extra-addons\membership_profile_search\static\src\components\MemberList.js
/** @odoo-module **/

import { Component, useState } from "@odoo/owl";
import { SearchBar } from "./SearchBar";
import { IndustryFilter } from "./IndustryFilter";
import { MemberCard } from "./MemberCard";

export class MemberList extends Component {
static template = "membership_profile_search.MemberList";
static components = { SearchBar, IndustryFilter, MemberCard };

setup() {
this.state = useState({
searchTerm: "",
industry: "",
members: Array.isArray(this.props.members) ? this.props.members : [],
page: 1,
total: 0,
limit: 12,
error: null, // Thêm trạng thái lỗi
});
}

async updateSearch(searchTerm) {
this.state.searchTerm = searchTerm;
this.state.page = 1;
await this.fetchMembers();
}

async updateIndustry(industry) {
this.state.industry = industry;
this.state.page = 1;
await this.fetchMembers();
}

async changePage(page) {
this.state.page = page;
await this.fetchMembers();
}

async fetchMembers() {
try {
const response = await fetch(
`/membership/data?search=${encodeURIComponent(
this.state.searchTerm
)}&industry=${encodeURIComponent(this.state.industry)}&page=${
this.state.page
}`
);
if (!response.ok) {
throw new Error("Không thể tải dữ liệu hội viên");
}
const data = await response.json();
if (!Array.isArray(data)) {
throw new Error("Dữ liệu trả về không hợp lệ");
}
this.state.members = data;
this.state.total = data.length || 0;
this.state.limit = 12;
this.state.error = null;
} catch (error) {
console.error("Lỗi khi tải dữ liệu hội viên:", error);
this.state.members = [];
this.state.total = 0;
this.state.error =
"Không thể tải dữ liệu hội viên. Vui lòng thử lại sau.";
}
}
}
---extra-addons\membership_profile_search\static\src\components\SearchBar.js
/** @odoo-module **/

import { Component, useState, useEffect } from "@odoo/owl";

export class SearchBar extends Component {
static template = "membership_profile_search.SearchBar";

setup() {
this.state = useState({ value: "" });
this.debounceTimeout = null;
}

onInput(ev) {
clearTimeout(this.debounceTimeout);
this.debounceTimeout = setTimeout(() => {
this.state.value = ev.target.value;
this.props.onSearch(this.state.value);
}, 300);
}
}
---extra-addons\membership_profile_search\static\src\css\industry_filter.css
.industry-filter-container {
display: flex;
justify-content: center;
margin-bottom: 20px;
}
.industry-filter-container .industry-buttons {
display: flex;
flex-wrap: wrap;
gap: 10px;
justify-content: center;
}
.industry-filter-container .industry-btn {
background-color: #f8f9fa;
border: 1px solid #278F84;
color: #278F84;
padding: 8px 16px;
border-radius: 5px;
font-size: 0.9rem;
cursor: pointer;
transition: all 0.2s;
}
.industry-filter-container .industry-btn:hover,
.industry-filter-container .industry-btn.active {
background-color: #278F84;
color: white;
}
---extra-addons\membership_profile_search\static\src\css\membership_search.css
.member-list-container {
padding-top: 20px;
}
.member-list-container h1 {
text-align: center;
font-size: 2.5rem;
color: #278F84;
margin-bottom: 10px;
}
.member-list-container .filter-stats {
font-size: 0.9rem;
color: #666;
text-align: center;
}
.member-list-container .row {
margin-top: 20px;
}
---extra-addons\membership_profile_search\static\src\css\member_card.css
.member-card {
border: none;
border-radius: 10px;
box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
background-color: #fff;
transition: transform 0.2s;
}
.member-card:hover {
transform: translateY(-5px);
}
.member-card .card-img-top {
width: 120px;
height: 120px;
object-fit: cover;
border-radius: 50%;
margin-top: 20px;
border: 4px solid #278F84;
}
.member-card .card-body {
padding: 15px;
text-align: center;
}
.member-card .card-title {
font-size: 1.25rem;
font-weight: bold;
color: #278F84;
}
.member-card .card-text {
font-size: 0.9rem;
color: #666;
margin-bottom: 5px;
}
.member-card .card-text strong {
color: #278F84;
}
---extra-addons\membership_profile_search\static\src\css\search_bar.css
.search-bar-container {
display: flex;
justify-content: center;
margin-bottom: 20px;
}
.search-bar-container .input-group {
max-width: 600px;
width: 100%;
}
.search-bar-container .form-control {
border-radius: 5px 0 0 5px;
}
.search-bar-container .btn-primary {
background-color: #278F84;
border-color: #278F84;
border-radius: 0 5px 5px 0;
}
.search-bar-container .btn-primary:hover {
background-color: #1d6a62;
border-color: #1d6a62;
}
---extra-addons\membership_profile_search\static\src\js\membership_search.js
/** @odoo-module **/

import { mount } from "@odoo/owl";
import { MemberList } from "../components/MemberList";

document.addEventListener("DOMContentLoaded", () => {
const root = document.querySelector(".member-list-container");
if (root) {
mount(MemberList, root, { props: { members: window.members || [] } });
} else {
console.error("Không tìm thấy phần tử .member-list-container. Đảm bảo template đã được render.");
}
});
---extra-addons\membership_profile_search\static\src\xml\IndustryFilter.xml
<?xml version="1.0" encoding="UTF-8"?>
<templates>
<t t-name="membership_profile_search.IndustryFilter">
<div class="industry-filter-container">
<div class="industry-buttons">
<button class="industry-btn" t-att-class="state.activeIndustry == '' ? 'active' : ''"
t-on-click="() => setIndustry('')" aria-label="Tất cả ngành nghề">Tất cả ngành nghề</button>
<t t-if="industries and len(industries) > 0">
<t t-foreach="industries" t-as="industry">
<button class="industry-btn" t-att-class="state.activeIndustry == industry.name ? 'active' : ''"
t-att-data-industry="industry.name" t-on-click="() => setIndustry(industry.name)"
t-att-aria-label="'Lọc theo ngành ' + industry.name">
<t t-esc="industry.name"/>
</button>
</t>
</t>
<t t-else="">
<div class="alert alert-info text-center">
Không có ngành nghề nào được định nghĩa.
</div>
</t>
</div>
</div>
</t>
</templates>
---extra-addons\membership_profile_search\static\src\xml\MemberCard.xml
<?xml version="1.0" encoding="UTF-8"?>
<templates>
<t t-name="membership_profile_search.MemberCard">
<div class="col-md-4 col-sm-6 mb-4">
<div class="member-card h-100 shadow-sm">
<a t-att-href="'/partners/%s' % slug(member)" class="text-decoration-none text-dark">
<img t-att-src="imageSrc" t-att-alt="'Member Avatar: ' + (member.name or '')"
class="card-img-top rounded-circle mx-auto mt-3" style="width: 120px; height: 120px; object-fit: cover;"
loading="lazy"/>
<div class="card-body text-center">
<h5 class="card-title"><strong><t t-esc="member.name or ''"/></strong></h5>
<p class="card-text"><strong>Công ty: </strong><t t-esc="member.company_name or '-'"/></p>
<p class="card-text" t-att-data-industry="member.industry_id.name or ''">
<strong>Ngành nghề: </strong><t t-esc="member.industry_id.name or ''"/>
</p>
<p class="card-text">
<strong>Địa chỉ: </strong>
<t t-esc="', '.join(filter(None, [member.street, member.city, member.state_id.name if member.state_id else None, member.country_id.name if member.country_id else None])) or '-'"/>
</p>
</div>
</a>
</div>
</div>
</t>
</templates>
---extra-addons\membership_profile_search\static\src\xml\MemberList.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE templates [
<!ENTITY laquo "entity-value">
<!ENTITY raquo "entity-value">
]>
<templates>
<t t-name="membership_profile_search.MemberList">
<div class="member-list-container">
<h1>Danh sách hội viên</h1>
<p style="margin-bottom: 30px;">
Hội viên chính thức được công nhận và*miễn phí* lưu giữ hồ sơ điện tử tại Hiệp hội Doanh nghiệp Nhỏ và Vừa TP. Vũng Tàu...
</p>
<SearchBar onSearch="updateSearch"/>
<IndustryFilter industries="members.mapped('industry_id')" onIndustryChange="updateIndustry"/>
<t t-if="state.error">
<div class="alert alert-danger text-center">
<t t-esc="state.error"/>
</div>
</t>
<div class="filter-stats mb-3">
Kết quả tìm được <span t-esc="len(members)"/> hội viên
</div>
<t t-if="not members and not state.error">
<div class="alert alert-info text-center">
Không tìm thấy hội viên nào phù hợp với tiêu chí tìm kiếm.
</div>
</t>
<div class="row">
<t t-foreach="members" t-as="member">
<MemberCard member="member"/>
</t>
</div>
<t t-if="total > limit">
<nav aria-label="Page navigation">
<ul class="pagination justify-content-center mt-4">
<li class="page-item">
<a class="page-link" href="#" t-on-click="() => changePage(page - 1)" aria-label="Previous">
<span aria-hidden="true">&laquo;</span>
</a>
</li>
<t t-set="totalPages" t-value="Math.ceil(total / limit)"/>
<t t-foreach="[...Array(totalPages).keys()].map(i => i + 1)" t-as="p">
<li class="page-item" t-att-class="p == page ? 'active' : ''">
<a class="page-link" href="#" t-on-click="() => changePage(p)"><t t-esc="p"/></a>
</li>
</t>
<li class="page-item" t-att-class="page == totalPages ? 'disabled' : ''">
<a class="page-link" href="#" t-on-click="() => changePage(page + 1)" aria-label="Next">
<span aria-hidden="true">&raquo;</span>
</a>
</li>
</ul>
</nav>
</t>
</div>
</t>
</templates>
---extra-addons\membership_profile_search\static\src\xml\SearchBar.xml
<?xml version="1.0" encoding="UTF-8"?>
<templates>
<t t-name="membership_profile_search.SearchBar">
<div class="search-bar-container">
<div class="input-group">
<input type="text" class="form-control" placeholder="Tìm kiếm theo tên, công ty, ngành nghề hoặc địa chỉ..."
t-model="state.value" t-on-input="onInput" aria-label="Tìm kiếm hội viên"/>
<div class="input-group-append">
<button class="btn btn-primary" type="button" t-on-click="onInput" aria-label="Tìm kiếm">Tìm kiếm</button>
</div>
</div>
</div>
</t>
</templates>
---extra-addons\membership_profile_search\tests\test_membership_profile_search.py
from odoo.tests import tagged  # type: ignore
from odoo.tests.common import HttpCase  # type: ignore
from odoo.exceptions import ValidationError  # type: ignore
from .. import utils  # Import utils

@tagged('membership_profile_search')
class TestMembershipProfileSearch(HttpCase):
def setUp(self):
super(TestMembershipProfileSearch, self).setUp()
self.industry = self.env['res.partner.industry'].create({
'name': 'Công nghệ thông tin',
})

self.partner1 = self.env['res.partner'].create({
'name': 'Công ty TNHH Công nghệ Vina',
'company_name': 'Vina Tech',
'industry_id': self.industry.id,
'street': '123 Đường Lê Lợi',
'city': 'Vũng Tàu',
'country_id': self.env.ref('base.vn').id,
'website_published': True,
'membership_state': 'paid',
})

self.partner2 = self.env['res.partner'].create({
'name': 'Nguyễn Văn A',
'company_name': 'Doanh nghiệp Minh Anh',
'industry_id': self.industry.id,
'street': '456 Đường Nguyễn Huệ',
'city': 'Hà Nội',
'country_id': self.env.ref('base.vn').id,
'website_published': True,
'membership_state': 'paid',
})

self.partner3 = self.env['res.partner'].create({
'name': 'Công ty Không Công Khai',
'company_name': 'Hidden Corp',
'industry_id': self.industry.id,
'street': '789 Đường Trần Phú',
'city': 'Đà Nẵng',
'country_id': self.env.ref('base.vn').id,
'website_published': False,
'membership_state': 'none',
})

def test_remove_diacritics(self):
test_cases = [
('Công nghệ Thông tin', 'Cong nghe Thong tin'),
('Đường Nguyễn Huệ', 'Duong Nguyen Hue'),
('Việt Nam', 'Viet Nam'),
]
for input_text, expected in test_cases:
result = utils.remove_diacritics(input_text)
self.assertEqual(result, expected, f"Chuẩn hóa không dấu thất bại: {input_text}")

def test_search_members_by_name(self):
response = self.url_open('/membership?search=Công ty TNHH Công nghệ Vina')
self.assertTrue(self.partner1.name in response.text, "Không tìm thấy hội viên theo tên")

response = self.url_open('/membership?search=Nguyễn Văn A')
self.assertTrue(self.partner2.name in response.text, "Không tìm thấy hội viên theo tên cá nhân")

def test_search_members_by_company(self):
response = self.url_open('/membership?search=Vina Tech')
self.assertTrue(self.partner1.company_name in response.text, "Không tìm thấy hội viên theo tên công ty")

response = self.url_open('/membership?search=Doanh nghiệp Minh Anh')
self.assertTrue(self.partner2.company_name in response.text, "Không tìm thấy hội viên theo tên công ty")

def test_search_members_by_industry(self):
response = self.url_open('/membership?search=Công nghệ thông tin')
self.assertTrue(self.partner1.name in response.text, "Không tìm thấy hội viên theo ngành nghề")
self.assertTrue(self.partner2.name in response.text, "Không tìm thấy hội viên theo ngành nghề")

def test_search_members_by_address(self):
response = self.url_open('/membership?search=Đường Lê Lợi')
self.assertTrue(self.partner1.street in response.text, "Không tìm thấy hội viên theo địa chỉ")

response = self.url_open('/membership?search=Nguyễn Huệ')
self.assertTrue(self.partner2.street in response.text, "Không tìm thấy hội viên theo địa chỉ")

def test_search_no_diacritics(self):
response = self.url_open('/membership?search=Cong nghe Thong tin')
self.assertTrue(self.partner1.name in response.text, "Không tìm thấy hội viên khi tìm kiếm không dấu")
self.assertTrue(self.partner2.name in response.text, "Không tìm thấy hội viên khi tìm kiếm không dấu")

def test_filter_by_industry(self):
response = self.url_open('/membership')
self.assertTrue('Công nghệ thông tin' in response.text, "Không hiển thị nút lọc ngành nghề")

members = self.env['res.partner'].search([
('membership_state', '!=', 'none'),
('website_published', '=', True),
('industry_id.name', 'ilike', 'Công nghệ thông tin')
])
self.assertIn(self.partner1, members, "Hội viên 1 không được lọc theo ngành nghề")
self.assertIn(self.partner2, members, "Hội viên 2 không được lọc theo ngành nghề")

def test_member_detail_page(self):
response = self.url_open(f'/partners/{self.partner1.id}')
self.assertTrue(self.partner1.name in response.text, "Không hiển thị tên hội viên trên trang chi tiết")
self.assertTrue(self.partner1.company_name in response.text, "Không hiển thị tên công ty trên trang chi tiết")
self.assertTrue(self.partner1.street in response.text, "Không hiển thị địa chỉ trên trang chi tiết")

def test_unauthorized_access(self):
response = self.url_open(f'/partners/{self.partner3.id}', allow_redirects=False)
self.assertEqual(response.status_code, 404, "Không chặn truy cập hội viên không công khai")

def test_empty_search(self):
response = self.url_open('/membership?search=NonExistentKeyword')
self.assertTrue("Không tìm thấy hội viên nào phù hợp với tiêu chí tìm kiếm" in response.text,
"Không hiển thị thông báo khi không tìm thấy hội viên")

def test_access_with_internal_user(self):
self.authenticate('admin', 'admin')
response = self.url_open(f'/partners/{self.partner3.id}')
self.assertTrue(self.partner3.name in response.text, "Người dùng nội bộ không xem được hội viên không công khai")

def test_search_empty_fields(self):
empty_partner = self.env['res.partner'].create({
'name': 'Hội viên Không Đầy Đủ',
'website_published': True,
'membership_state': 'paid',
})
response = self.url_open('/membership?search=Hội viên Không Đầy Đủ')
self.assertTrue(empty_partner.name in response.text, "Không tìm thấy hội viên với trường trống")
---extra-addons\membership_profile_search\tests\__pycache__\test_membership_profile_search.cpython-39.pyc

---extra-addons\membership_profile_search\views\membership_profile_search_templates.xml
<?xml version="1.0" encoding="UTF-8"?>
<odoo>
<template id="membership_profile_search_list_template" name="Membership Profile Search List">
<t t-call="website.layout">
<t t-set="head">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
<link rel="stylesheet" type="text/css" href="/membership_profile_search/static/src/css/membership_search.css"/>
<link rel="stylesheet" type="text/css" href="/membership_profile_search/static/src/css/search_bar.css"/>
<link rel="stylesheet" type="text/css" href="/membership_profile_search/static/src/css/industry_filter.css"/>
<link rel="stylesheet" type="text/css" href="/membership_profile_search/static/src/css/member_card.css"/>
</t>
<script type="text/javascript">
window.members = <t t-if="members and len(members) > 0">[<t t-foreach="members" t-as="member">
{
"id": <t t-esc="member.id"/>,
"name": "<t t-esc="member.name or ''" t-options='{"widget": "char"}'/>",
"company_name": "<t t-esc="member.company_name or ''" t-options='{"widget": "char"}'/>",
"industry_id": {
"name": "<t t-esc="member.industry_id.name or ''" t-options='{"widget": "char"}'/>"
},
"street": "<t t-esc="member.street or ''" t-options='{"widget": "char"}'/>",
"city": "<t t-esc="member.city or ''" t-options='{"widget": "char"}'/>",
"state_id": {
"name": "<t t-esc="member.state_id.name or ''" t-options='{"widget": "char"}'/>"
},
"country_id": {
"name": "<t t-esc="member.country_id.name or ''" t-options='{"widget": "char"}'/>"
},
"image_1920": "<t t-esc="member.image_1920 or ''" t-options='{"widget": "char"}'/>"
}<t t-if="not member_last">,</t></t>]</t><t t-else="">[]</t>;
</script>
<div class="member-list-container"/>
</t>
</template>
</odoo>
